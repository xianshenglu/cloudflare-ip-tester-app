name: Android Release ## name of the workflow

on:
  pull_request:
    types: [closed]

permissions: 
  contents: write

jobs:
  android-release:
    if: github.event.pull_request.merged == true || github.ref_name == 'main'    
    name: Android Release
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_BOT_RELEASE  }}
          fetch-depth: 0 # for changeLog

      - name: Set up our JDK environment # setup JDK environment: mandatory as we need to build  android project
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8

      - name: Install dependencies 
        run: npm ci 

      # configure cash for gradle : will help to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Generate App APK
        run: |
          npm run build:release

      ## sign generated apk
      - name: Sign APK
        id: sign_app
        uses: iota9star/sign-android-release@v1.0.5
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.MYAPP_UPLOAD_STORE_FILE_BASE64 }}
          alias: ${{ secrets.MYAPP_UPLOAD_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          keyPassword: ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}
          fileRegex: .*apk 
      
      - name: Release
        run: |          
          git config --local user.email "xianshenglu@qq.com"
          git config --local user.name "xianshenglu"
          npm run release
          
      ## Distribute app to Firebase App Distribution for testing / use google play internal track if you have a google play account
      # - name: upload artifact to Firebase App Distribution
      #   uses: wzieba/Firebase-Distribution-Github-Action@v1
      #   with:
      #     appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
      #     token: ${{secrets.ANDROID_FIREBASE_TOKEN}}
      #     groups: testers
      #     file: ${{steps.sign_app.outputs.signedReleaseFile}}